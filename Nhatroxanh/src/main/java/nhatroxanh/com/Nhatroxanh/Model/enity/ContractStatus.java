package nhatroxanh.com.Nhatroxanh.Model.enity;

public enum ContractStatus {
    PENDING("PENDING", "Ch·ªù x·ª≠ l√Ω"),
    ACTIVE("ACTIVE", "ƒêang hi·ªáu l·ª±c"),
    EXPIRED("EXPIRED", "H·∫øt h·∫°n"),
    TERMINATED("TERMINATED", "ƒê√£ ch·∫•m d·ª©t"),
    CANCELLED("CANCELLED", "ƒê√£ h·ªßy");

    private final String code;
    private final String description;

    ContractStatus(String code, String description) {
        this.code = code;
        this.description = description;
    }

    public String getCode() {
        return code;
    }

    public String getDescription() {
        return description;
    }

    // üîß CONVERT T·ª™ STRING
    public static ContractStatus fromString(String status) {
        if (status == null || status.trim().isEmpty()) {
            throw new IllegalArgumentException("Status kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        String upperStatus = status.trim().toUpperCase();

        for (ContractStatus contractStatus : ContractStatus.values()) {
            if (contractStatus.name().equals(upperStatus) ||
                    contractStatus.getCode().equals(upperStatus)) {
                return contractStatus;
            }
        }

        throw new IllegalArgumentException("Status kh√¥ng h·ª£p l·ªá: " + status +
                ". C√°c gi√° tr·ªã cho ph√©p: " + java.util.Arrays.toString(ContractStatus.values()));
    }

    // üîß KI·ªÇM TRA STATUS H·ª¢P L·ªÜ
    public static boolean isValid(String status) {
        try {
            fromString(status);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }

    // üîß L·∫§Y T·∫§T C·∫¢ STATUS
    public static java.util.List<String> getAllStatuses() {
        return java.util.Arrays.stream(ContractStatus.values())
                .map(ContractStatus::name)
                .collect(java.util.stream.Collectors.toList());
    }
}
